什么是 Zephir?
===========
现今的PHP应用必须在一些相关的因素中取得平衡如稳定性，高性能与功能性等。每个PHP程序（如果不是玩具应用的话）都基于一些能用组件构建，而这些组件
也通常是许多其他应用的基础。

这些通用组件一般是库/框架等或是二者的混合体。一旦安装了这些库/框架，我们就通常很少修改他们，作为应用的基础，这些库或框架必须功能丰富且足够高效。

实现高效和稳定的库相对比较复杂，因为要在其上进行较高层次的抽象。假定这些库或框架很少改变，那么我们可以使用扩展的形式来实现这些库或框架，这样就可以
利用本地编译语言的优势，从而提高性能与减少资源的占用。

使用Zephir，我们可以实现面向对象的类库、框架或应用，这样我们开发的应用就可以拥有更快响应速度从而提升用户体验。

如果你是一个PHP程序员...
------------------------------
PHP是在Web应用开发中最受欢迎的语言之一。如PHP一样的动态类型语言，因其灵活性一般会带来很高的开发效率。

从PHP4和PHP5起，PHP就运于Zend Engine之上了。Zend Engine执行的是php编译后的字节码。Zend Engine现今存在于大多数的PHP安装中，使用
Zephir，我们可以开发出运行于Zend Engine之上的扩展。

Zephir是使用PHP构建的，所以他们有许么多的共同点，但Zephir也有区别于PHP的属于自己的特点。例如，Zephir更严格，但是由于由于其是编译型语言
使得他的开发效率不如PHP.

如果你是一个 C 程序员...
----------------------------
C语言是最强大的最流行的语言之一。事实上PHP是使用C开发的，这也是为什么我们可以使用C语言来PHP扩展的原因。C语言给予我们可以
操纵内存的自由，使用C语言我们还可以使用低级的类型甚至是嵌入汇编代码。

所以使用C语言来开发应用与PHP或Zephir相比通常会花费更长的时间，更有甚者，如果你不是C语言方面有经验的开发者，有些bug还不容易解决。

Zephir对外没有暴露操纵内存的接口，这样C开发者会觉得Zephir不如C强大，但也正是这样的设计让Zephir更安全，不过你很快会发现Zephir更好用。

编译和解释
-----------------------------
编译型语言通常开发速度比较慢；你需要在运行之前先花一些时间进行编译。不过解释型语言通常性能比较低。在某些情况下编译型语言与解释型
语言的性能差并不那么明显。

Zephir需要进行编译后执行，与之相应的PHP语言一般是解释执行的。

编译型语言一旦编译后就不再次进行解释了，与之相应的是解释型语言需要在每次执行时都要进行解释。开发者可以决定应用的哪些部分使用Zephir来写
哪些部分使用PHP来写。

静态类型语言对比动态类型语言
---------------------------------------------------
大体上说静态语言的类型变量在其生命周期内是不变的，其类型限定于其定义，且只能强制转化为相兼容的类型。
像C/C++就是这种类型的语言：

.. code-block:: c

	int a = 0;
	a = "hello"; // 不允许

动态语言中变量的类型是绑定于值而不是变量的。所以动态类型语言的变量可以被赋予多种类型的值。像Javascript/PHP等都是动态类型的语言：

.. code-block:: zephir

	var a = 0;
	a = "hello"; // 允许

尽管动态语言的开发效率比较高，但其并不适合开发所有种类的应用，尤其是那些大型的且对性能要求比较高的应用。

优化像PHP一样的动态语言的性能通常比优化静态类型的C语言更有挑战性。静态语言中，优化器可以根据检测变量类型来进行多种类型的优化。动态语言中只有很少的优化
选择可以做，这让会让优化动态语言性能的工作更难做。

虽然现在的动态语言的优化做的越来越好（像Jit编译），但其性能还是落后于静态语言。所以从这方面来说如果你开发高性能应用，静态语言
亦然是一个不错的选择。

静态语言的另一个好处是其编译器在编译期间会执行更多的检查。静态编译器不能发现逻辑错误这是正常的，但他可以发现一些解释语言在运行时
才发现的错误。

Zephir语言即是动态的也是静态的，这可以让我们使用允许利用其动静结合的优势。

编译方式（？）
------------------
Zephir可以编译为本地代码（当前通过编译成C之后再编译成机器语言），像gcc/clang/vc++之类的编译器可以优化并编译出机器代码。
下面的图展示了这些步骤：

.. figure:: ../_static/img/scheme.png
    :align: center

除了Zephir带来的性能提升，随着时间的推移，编译器带来的新的性能提升会让应用的性能得以提升。

* `GCC optimizations <http://gcc.gnu.org/onlinedocs/gcc-4.1.0/gcc/Optimize-Options.html>`_
* `LLVM passes <http://llvm.org/docs/Passes.html>`_
* `Visual C/C++ optimizations <http://msdn.microsoft.com/en-us/library/k1ack8f1.aspx>`_

代码保护
---------------
在一些场景下，编译型语言并不会有很大的性能提升，这可能是因为性能瓶颈在I/O而不是在计算的原因。尽管如此编译成机器码后的代码带来的一个
额外好处是可以保护你的源代码。
使用Zephir开发的应用，如果提交给使用者二进制的扩展的话，就可对客户和用户隐藏自己的代码。

总结
----------
Zephir不是用来代码PHP或C语言的，Zephir更像是C与PHP的混合，Zephir可以让我们一窥静态类型编译和编译。Zephir是连接C与PHP世界的
桥梁是我们对二者结合以提供更高性能的一次尝试。
