类型
=====
Zephir 兼有动态和静态语言的特性. 本章我们将对Zephir支持的类型进行探讨:

动态类型
------------
Zephir中动态类型的变量和PHP中的变量完全一样, 变量可以不受限制的被赋予多种类型的值。

动态类型变量必须使用关键字 'var' 声明, 该行为与PHP几乎是相同的:

.. code-block:: zephir

    var a, b, c;

    // 初始化变量
    let a = "hello", b = false;

    // 修改变量的值
    let a = 10, b = "140";

    // 执行二元操作
    let c = a + b;

Zephir有八种类型动态变量:

+--------------------------------------------------+--------------------------------------------------------------------------------+
| 类型                                             + 描述                                                                           |
+--------------------------------------------------+--------------------------------------------------------------------------------+
| boolean(布尔型)                                  + 布尔型变量描述了值的真假。他的取值只有两个真或假。                             |
+--------------------------------------------------+--------------------------------------------------------------------------------+
| integer(整型)                                    + 整型。大小依赖于平台。                                                         |
+--------------------------------------------------+--------------------------------------------------------------------------------+
| float/double(浮点型/双精度浮点型)                + 浮点数。其大小依赖于平台。                                                     |
+--------------------------------------------------+--------------------------------------------------------------------------------+
| string(字符串)                                   + 字符串是由字符组成的，其中的每个字符即是一个byte长。                           |
+--------------------------------------------------+--------------------------------------------------------------------------------+
| array(数组)                                      + 字符串是一个有序映射。以键值对的形式存储。                                     |
+--------------------------------------------------+--------------------------------------------------------------------------------+
| object(对象)                                     + PHP中的对象。                                                                  |
+--------------------------------------------------+--------------------------------------------------------------------------------+
| resource(资源)                                   + 用来保存外部资源的句柄。                                                       |
+--------------------------------------------------+--------------------------------------------------------------------------------+
| null(空)                                         + 代表空值。                                                                     |
+--------------------------------------------------+--------------------------------------------------------------------------------+

更多相关类型信息可以参见 `PHP manual`_

布尔
^^^^^^^
布尔变量表示了值的真假。可以是true或false：

.. code-block:: zephir

    var a = false, b = true;

整型
^^^^^^^
整型数。整型数是平台相关的在32位的机器上最大值约是21亿（2147483647），64位系统上则更大一些最大值约为9E18。
PHP不支持无符号整数（动态类型），Zephir中也是一样。

.. code-block:: zephir

    var a = 5, b = 10050;

整数溢出
^^^^^^^^^^^^^^^^
与PHP相反的是Zephir不自动的检查整数溢出，如果开发者处理的结果会返回一个比较大的值一个比较好的做法是可以使用unsigned long或
float型来保存这个数据:

.. code-block:: zephir

    unsigned long my_number = 2147483648;

浮点数/双精度浮点数
^^^^^^^^^^^^^^^^
浮点数按精度有单精度浮点数与双精度浮点数之分。浮点数一般由三部分组成第一部通常有一个小数组成，第二部分为一个e，
第三部分则是一组代表幂的有数字组成。浮点数的大小与实现也是平台相关的(64位的浮点数IEEE格式)。

.. code-block:: zephir

    var number = 5.0, b = 0.014;

浮点数的精度是有限的。由于浮点数是平台相关的，像PHP一样Zephir也使用IEEE 754双精度格式，
有大约1.11e-16的相对误差。

字符串
^^^^^^
字符串是由一组字符组成的，其中的每个字符即是一个byte。像PHP一样Zephir只支持256字符集，因此不支持原生的Unicode.

.. code-block:: zephir

    var today = "friday";

Zephir中只能使用双引号来表示字符串单引号表示字符这与C语言是一致的。


Zephir支持如下转义序列:

+---------------+---------------------------------------------------------------------------+
| 序列          | 描述                                                                      |
+---------------+---------------------------------------------------------------------------+
| \\t           | 水平制表符                                                                |
+---------------+---------------------------------------------------------------------------+
| \\n           | 换行                                                                      |
+---------------+---------------------------------------------------------------------------+
| \\r           | 回车                                                                      |
+---------------+---------------------------------------------------------------------------+
| \\ \\         | 反斜杠                                                                    |
+---------------+---------------------------------------------------------------------------+
| \\"           | 双引号                                                                    |
+---------------+---------------------------------------------------------------------------+

.. code-block:: zephir

    var today = "\tfriday\n\r",
        tomorrow = "\tsaturday";

Zephir中不支持像PHP中一样的对双引号中的字符进行解释（以便找出变量以进行值替代），因此需要使用下面的替代方式来实现字符串连接:

.. code-block:: zephir

    var name = "peter";

    echo "hello: " . name;

数组
^^^^^^
Zephir中的数组和PHP中是一样的： 不同的序列（访问方式等）代表者不同的数据结构类型，其用法也不同；比如可以用作数组，列表（向量），
hash表（map的一种实现），字典，集合，栈，队列等。数组值也可是另一个数组，树与多维数组等。

Zephir中对数组的定义与PHP中略有不同:

.. code-block:: zephir

    //必须使用方括号来定义数组
    let myArray = [1, 2, 3];

    //使用冒号分割开键值对来定义hash
    let myHash = ["first": 1, "second": 2, "third": 3];

Zephir数组中只能使用整型或字符串作为键:

.. code-block:: zephir

    let myHash = [0: "first", 1: true, 2: null];
    let myHash = ["first": 7.0, "second": "some string", "third": false];

对象
^^^^^^^
Zephir 允许实例化, 操作, 调用方法, 读取类常量等:

.. code-block:: zephir

    let myObject = new stdClass(),
        myObject->someProperty = "my value";

静态类型
------------
静态类型为开发者提供了一种使用C语言中基本类型的机会。一旦变量被定义为静态类型，在使用过程中就不能再修改其类型了。
静态类型会更容易的让编译器来做出优化的选择。Zephir中支持下列静态类型

+----------------------------------------------+--------------------------------------------------------------------------------+
| 类型                                         + 描述                                                                           |
+----------------------------------------------+--------------------------------------------------------------------------------+
| boolean(布尔型)                              + 布尔型变量描述了值的真假。他的取值只有两个真或假。                             |
+----------------------------------------------+--------------------------------------------------------------------------------+
| integer(整型)                                + 有符号整型。至少16位长。                                                       |
+----------------------------------------------+--------------------------------------------------------------------------------+
| unsigned integer(无符号整型)                 + 无符号整型。至少16位长。                                                       |
+----------------------------------------------+--------------------------------------------------------------------------------+
| char(字符型)                                 + 计算机可直接寻址的最小单位，可以存下一个字符                                   |
+----------------------------------------------+--------------------------------------------------------------------------------+
| unsigned char(无符号字符型)                  + 大小同字符型，但，是有符号的。                                                 |
+----------------------------------------------+--------------------------------------------------------------------------------+
| long(长整型)                                 + 有符号长整型。至少32位。                                                       |
+----------------------------------------------+--------------------------------------------------------------------------------+
| unsigned long(无符号长整型)                  + 长度和有符号整型一样，但，是无符号的。                                         |
+----------------------------------------------+--------------------------------------------------------------------------------+
| float/double(浮点型/双精度浮点型)            + 双精度浮点型。大小与平台相关。                                                 |
+----------------------------------------------+--------------------------------------------------------------------------------+
| string(字符串)                               + 字符串是由字符组成的，其中的每个字符即是一个byte长。                           |
+----------------------------------------------+--------------------------------------------------------------------------------+
| array(数组)                                  + 一个可以用作hash,map,dictionary,collecton,stack的结构。                        |
+----------------------------------------------+--------------------------------------------------------------------------------+

布尔
^^^^^^^
布尔变量表示真值。或true或false。与动态变量不同的是不管赋什么值，静态的布尔值会一直保持真或假:

.. code-block:: zephir

    boolean a;

    let a = true,
        a = 100, // 自动转换成true
        a = null, // 强制转换为假
        a = "hello"; // 抛出编译异常

整型/无符号整型
^^^^^^^^^^^^^^^^^^^^^^^^
静态整型与动态整型是一样的。他的类型会保持不变:

.. code-block:: zephir

    int a;

    let a = 50,
        a = -70,
        a = 100.25, // 自动强制转换为 100
        a = null, // 自动强制转换为 0
        a = false, // 自动强制转换为 0
        a = "hello"; // 抛出编译异常

无符号整型与整型不同的是他们没有符号，也就意味着可以在其中存放非负数:

.. code-block:: zephir

    let a = 50,
        a = -70, // 自动强制转换为 70
        a = 100.25, // 自动强制转换为 100
        a = null, // 自动强制转换为 0
        a = false, // 自动强制转换为 0
        a = "hello"; // 抛出编译异常

无符号整型的最大值比有符号整型的最大值大一倍，无符号整型转换成有符号整型时可能会丢失数据:

.. code-block:: zephir

    uint a, int b;

    let a = 2147483648,
        b = a, // 有可能会有丢失数据

长整型/无符号长整型
^^^^^^^^^^^^^^^^^^
长整型的位数通常比整型大一倍，所以他们可存的整型数比较大，整型赋值给长整型时会自动强制转换为长整型:

.. code-block:: zephir

    long a;

    let a = 50,
        a = -70,
        a = 100.25, // 自动强制转换为 100
        a = null, // 自动强制转换为 0
        a = false, // 自动强制转换为 0
        a = "hello"; // 抛出编译异常

无符号长整型与整型类型除了他们没有符号之外，也就意味着可以用其存储非负数：

.. code-block:: zephir

    let a = 50,
        a = -70, // 自动强制转换为 70
        a = 100.25, // 自动强制转换为 100
        a = null, // 自动强制转换为 0
        a = false, // 自动强制转换为 0
        a = "hello"; // 抛出异常

无符号长整型的最大值是有符号长整型最大值的两倍，因此无符号长整型向有符号长整型赋值时可能会丢失数据:

.. code-block:: zephir

    ulong a, long b;

    let a = 4294967296,
        b = a, // 可能丢失数据

字符型/无符号字符型
^^^^^^^^^^^^^^^^^^
可直接寻址的最小内存单元，其中可以存入一个字符。字符是组成字符串的元素:

.. code-block:: zephir

    char ch, string name = "peter";

    let ch = name[2]; // 存储 't'
    let ch = 'Z'; // 字符必须使用单引号包起来

字符串
^^^^^^
字符串是由字符组成的，每个字符即是一个char。PHP中只支持256字符集，因此是不支持原生Unicode字符集的。

当变量定义为字符串时其类型就不可被更改了:

.. code-block:: zephir

    string a;

    let a = "",
        a = "hello", //字符串要包在双引号中
        a = 'A', // 字符'A'转换成字符串"A"
        a = null; // 自动强制转换为 ""



.. _`PHP manual`: http://www.php.net/manual/en/language.types.php
