内置方法
=======
正如前文提到的，Zephir完全是面向对象的，其静态类型（基本类型变量）变量也是作为对象来处理的.

对比如下的两个方法:

.. code-block:: zephir

    public function binaryToHex(string! s) -> string
    {
        var o = "", n; char ch;

        for ch in range(0, strlen(s)) {
            let n = sprintf("%X", ch);
            if strlen(n) < 2 {
                let o .= "0" . n;
            } else {
                let o .= n;
            }
        }
        return o;
    }

和:

.. code-block:: zephir

    public function binaryToHex(string! s) -> string
    {
        var o = "", n; char ch;

        for ch in range(0, s->length()) {
            let n = ch->toHex();
            if n->length() < 2 {
                let o .= "0" . n;
            } else {
                let o .= n;
            }
        }
        return o;
    }

两个方法的功能一致，但第二个方法使用的是面向对象的方式来实现的。在基本的静态变量上使用面向对象的方式来写代码不会对程序的性能带来不好的影响，因为
Zephir的编译器会自动的把面向对象的代码转译为面向过程的代码版本。

字符串
^^^^^

Zephir中提供了如下的字符串方法:

+-------------------+--------------------+--------------------------------------------------+
| 面向对象          | 面向过程           | 描述                                             |
+-------------------+--------------------+--------------------------------------------------+
| s->length()       | strlen(s)          | 取字符串长度                                     |
+-------------------+--------------------+--------------------------------------------------+
| s->trim()         | trim(s)            | 从字符串的开头或结尾裁剪字符串（默认裁剪空字符） |
+-------------------+--------------------+--------------------------------------------------+
| s->trimleft()     | ltrim(s)           | 从字符串的开头裁剪字符串（默认裁剪空字符）       |
+-------------------+--------------------+--------------------------------------------------+
| s->trimright()    | rtrim(s)           | 从字符串的结尾裁剪字符串（默认裁剪空字符）       |
+-------------------+--------------------+--------------------------------------------------+
| s->index("foo")   | strpos(s, "foo")   | 查找字符串首次出现的位置                         |
+-------------------+--------------------+--------------------------------------------------+
| s->lower()        | strtolower(s)      | 把字符串转换成小写                               |
+-------------------+--------------------+--------------------------------------------------+
| s->upper()        | strtoupper(s)      | 把字符串转换成大写                               |
+-------------------+--------------------+--------------------------------------------------+
| s->lowerfirst()   | lcfirst(s)         | 首字母小写                                       |
+-------------------+--------------------+--------------------------------------------------+
| s->upperfirst()   | ucfirst(s)         | 首字母大写                                       |
+-------------------+--------------------+--------------------------------------------------+
| s->format()       | sprintf(s, "%s", x)| 返回格式化的字符串                               |
+-------------------+--------------------+--------------------------------------------------+
| s->md5()          | md5(s)             | 计算md5值                                        |
+-------------------+--------------------+--------------------------------------------------+
| s->sha1()         | sha1(s)            | 计算sha1值                                       |
+-------------------+--------------------+--------------------------------------------------+

数组
^^^^

Zephi中提供了如下的数组操作方法

+---------------+--------------------+----------------------------------------+
| 面向对象      | 面向过程           | 描述                                   |
+---------------+--------------------+----------------------------------------+
| a->join(" ")  | join(" ", a)       | 返回使用字符连接数组中的元素后的结果   |
+---------------+--------------------+----------------------------------------+
| a->reverse()  | array_reverse(a)   | 返回倒序的数组                         |
+---------------+--------------------+----------------------------------------+

字符
^^^^

下面是字符相关的方法:

+------------+--------------------+
| 面向对象   | 面向过程           |
+------------+--------------------+
| ch->toHex()| sprintf("%X", ch)  |
+------------+--------------------+

数字
^^^^

下面是数字相关的方法:

+----------+----------+
| 面向对向 | 面向过程 |
+----------+----------+
| i->abs() | abs(i)   |
+----------+----------+

