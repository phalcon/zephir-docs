内置方法
=======
正如前文提到的，Zephir完全是面向对象的，其静态类型（基本类型变量）变量也是作为对象来处理的.

对比如下的两个方法:

.. code-block:: zephir

    public function binaryToHex(string! s) -> string
    {
        var o = "", n; char ch;

        for ch in range(0, strlen(s)) {
            let n = sprintf("%X", ch);
            if strlen(n) < 2 {
                let o .= "0" . n;
            } else {
                let o .= n;
            }
        }
        return o;
    }

和:

.. code-block:: zephir

    public function binaryToHex(string! s) -> string
    {
        var o = "", n; char ch;

        for ch in range(0, s->length()) {
            let n = ch->toHex();
            if n->length() < 2 {
                let o .= "0" . n;
            } else {
                let o .= n;
            }
        }
        return o;
    }

两个方法的功能一致，但第二个方法使用的是面向对象的方式来实现的。在基本的静态变量上使用面向对象的方式来写代码不会对程序的性能带来不好的影响，因为
Zephir的编译器会自动的把面向对象的代码转译为面向过程的代码版本。

字符串
^^^^^

Zephir中提供了如下的字符串方法(由于rst的表格中文对齐有问题，所以表格中的内容不再翻译):

+-------------------+-----------------------------------------------------+----------------------------------------------------------------------------------+
| OO                | Procedural                                          | Description                                                                      |
+-------------------+-----------------------------------------------------+----------------------------------------------------------------------------------+
| s->length()       | strlen(s)                                           | Get string length                                                                |
+-------------------+-----------------------------------------------------+----------------------------------------------------------------------------------+
| s->trim()         | trim(s)                                             | Strip whitespace (or other characters) from the beginning and end of a string    |
+-------------------+-----------------------------------------------------+----------------------------------------------------------------------------------+
| s->trimleft()     | ltrim(s)                                            | Strip whitespace (or other characters) from the beginning of a string            |
+-------------------+-----------------------------------------------------+----------------------------------------------------------------------------------+
| s->trimright()    | rtrim(s)                                            | Strip whitespace (or other characters) from the end of a string                  |
+-------------------+-----------------------------------------------------+----------------------------------------------------------------------------------+
| s->index("foo")   | strpos(s, "foo")                                    | Find the position of the first occurrence of a substring in a string             |
+-------------------+-----------------------------------------------------+----------------------------------------------------------------------------------+
| s->lower()        | strtolower(s)                                       | Make a string lowercase                                                          |
+-------------------+-----------------------------------------------------+----------------------------------------------------------------------------------+
| s->upper()        | strtoupper(s)                                       | Make a string uppercase                                                          |
+-------------------+-----------------------------------------------------+----------------------------------------------------------------------------------+
| s->lowerfirst()   | lcfirst(s)                                          | Make a string's first character lowercase                                        |
+-------------------+-----------------------------------------------------+----------------------------------------------------------------------------------+
| s->upperfirst()   | ucfirst(s)                                          | Make a string's first character uppercase                                        |
+-------------------+-----------------------------------------------------+----------------------------------------------------------------------------------+
| s->format()       | sprintf(s, "%s", x)                                 | Return a formatted string                                                        |
+-------------------+-----------------------------------------------------+----------------------------------------------------------------------------------+
| s->md5()          | md5(s)                                              | Calculate the md5 hash of a string                                               |
+-------------------+-----------------------------------------------------+----------------------------------------------------------------------------------+
| s->sha1()         | sha1(s)                                             | Calculate the sha1 hash of a string                                              |
+-------------------+-----------------------------------------------------+----------------------------------------------------------------------------------+

数组
^^^^

Zephi中提供了如下的数组操作方法(由于rst的表格中文对齐有问题，所以表格中的内容不再翻译):

+-------------------+-----------------------------------------------------+----------------------------------------------------------------------------------+
| OO                | Procedural                                          | Description                                                                      |
+-------------------+-----------------------------------------------------+----------------------------------------------------------------------------------+
| a->join(" ")      | join(" ", a)                                        | Join array elements with a string                                                |
+-------------------+-----------------------------------------------------+----------------------------------------------------------------------------------+
| a->reverse()      | array_reverse(a)                                    | Return an array with elements in reverse order                                   |
+-------------------+-----------------------------------------------------+----------------------------------------------------------------------------------+

字符
^^^^

下面是字符相关的方法(由于rst的表格中文对齐有问题，所以表格中的内容不再翻译):

+-------------------+-----------------------------------------------------+
| OO                | Procedural                                          |
+-------------------+-----------------------------------------------------+
| ch->toHex()       | sprintf("%X", ch)                                   |
+-------------------+-----------------------------------------------------+

数字
^^^^

下面是数字相关的方法(由于rst的表格中文对齐有问题，所以表格中的内容不再翻译):

+-------------------+-----------------------------------------------------+
| OO                | Procedural                                          |
+-------------------+-----------------------------------------------------+
| i->abs()          | abs(i)                                              |
+-------------------+-----------------------------------------------------+

